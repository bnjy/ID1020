package directed_3;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Scanner;

import edu.princeton.cs.algs4.*;

public class SymbolGraph {

	private ST<String, Integer> st;
	private String[] keys;
	private Digraph graph;
	
public SymbolGraph(Scanner filename, String delimiter) {
		
        //First pass builds the index by reading strings to associate
        //distinct strings with an index
		st = new ST<String,Integer>();
		In in = new In(filename);
		while(!in.isEmpty()) {
			String[] a = in.readLine().split(delimiter);
			for(int i = 0; i < a.length; i++) {
				if (!st.contains(a[i]))
					st.put(a[i], st.size());
			}
		}
		
		//inverted index to get string keys in an array
		keys = new String[st.size()];
		for (String name : st.keys()) {
			keys[st.get(name)] = name;
		}
		
        // second pass builds the graph by connecting first vertex on each
        // line to all others
		graph = new Digraph (st.size());
		in = new In(filename);
		while(in.hasNextLine()) {
			String[] a = in.readLine().split(delimiter);
			int v = st.get(a[0]);
			for (int i = 1; i < a.length; i++) {
				int w = st.get(a[i]);
				graph.addEdge(v, w);
			}
		}
	}
	
	public boolean contains(String s) {
		return st.contains(s);
	}
	
	public int index(String s) {
		return st.get(s);
	}
	
	public String name(int v) {
		return keys[v];
	}
	
	public Digraph graph() {
		return graph;
	}
	
    public static void main(String[] args) throws FileNotFoundException, MalformedURLException {
    	Scanner scanner = new Scanner(new File("/Users/Roth/Documents/KTH/ID1020/Java/lab4/src/directed_3/mini_data.txt"));
    	
    	String[] vertices = {"TA-TB", "TA-TF", "TC-TA", "TD-TF2", 
    			"TF-TE", "TG-TE","TH-TG", "TI-TH", "TJ-TK", "TJ-TL", "TJ-TM", "TL-TM"};
    	String delimiter = "-";
    	SymbolGraph sg = new SymbolGraph(vertices, delimiter);
    	
    	System.out.println(sg.graph.toString(sg));
    	
    	Topological topological = new Topological(sg.graph);
    	
    	for (int i : topological.order()) {
            StdOut.println(sg.name(i));
        }

    }
}
