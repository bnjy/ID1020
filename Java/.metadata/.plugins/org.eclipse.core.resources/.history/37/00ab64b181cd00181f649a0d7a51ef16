package directed_1;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Scanner;

import edu.princeton.cs.algs4.*;

/**
 * 
 * Reads a url database to set up a directed graph of vertices depending on the input.
 * Then prints each vertex and the directed edges for all vertices, using Breadth First Search.
 * 
 * Then asks user to give two vertices to see if there is a path between them.
 * 
	49 vertices, 107 edges
	AL: TN MS GA FL 
	FL: GA 
	GA: TN SC NC 
	MS: TN 
	TN: VA 
	AR: TX TN OK MS MO LA 
	LA: TX MS 
	MO: TN OK NE 
	OK: TX 
	TX: 
	AZ: UT NV NM CA 
	CA: OR NV 
	NM: TX OK 
	NV: UT OR 
	UT: WY 
	OR: WA 
	CO: WY UT OK NM NE KS 
	KS: OK NE MO 
	NE: WY SD 
	WY: 
	CT: RI NY MA 
	MA: VT RI NY NH 
	NY: VT PA 
	RI: 
	DC: VA MD 
	MD: WV VA PA 
	VA: WV 
	DE: PA NJ MD 
	NJ: PA NY 
	PA: WV 
	NC: VA TN SC 
	SC: 
	IA: WI SD NE MO MN IL 
	IL: WI MO KY IN 
	MN: WI SD ND 
	SD: WY 
	WI: 
	ID: WY WA UT OR NV MT 
	MT: WY SD ND 
	WA: 
	IN: OH MI KY 
	KY: WV VA TN OH MO 
	MI: WI OH 
	OH: WV PA 
	WV: 
	NH: VT 
	VT: 
	ME: NH 
	ND: SD 
	
	Source: 
	CA
	Destination: 
	NV
	There is a path between CA and NV.
 *	
 * @author Roth
 *
 */
public class SymbolGraph_d1 {

	private ST<String, Integer> st;
	private String[] keys;
	private Digraph_d1 graph;
	
	/**
	 * Initializes a graph from url, using a specified delimiter. Each line in the url database
	 * contains name of the vertex, followed by a list of the names of the vertices adjacent
	 * to that vertex.
	 * @param url the url to get the vertices
	 * @param delimiter the delimiter between fields.
	 */
	public SymbolGraph_d1(URL url, String delimiter) {
		st = new ST<String,Integer>();
		In in = new In(url);
		while(!in.isEmpty()) {
			String[] splitLineArray = in.readLine().split(delimiter);
			for(int i = 0; i < splitLineArray.length; i++) {
				if (!st.contains(splitLineArray[i]))
					st.put(splitLineArray[i], st.size());
			}
		}
		
		keys = new String[st.size()];
		for (String name : st.keys()) {
			keys[st.get(name)] = name;
		}
		
		graph = new Digraph_d1 (st.size());
		in = new In(url);
		
		while(in.hasNextLine()) {
			String[] splitLineArray = in.readLine().split(delimiter);
			int v = st.get(splitLineArray[0]);
			for (int i = 1; i < splitLineArray.length; i++) {
				int w = st.get(splitLineArray[i]);
				graph.addEdge(v, w);
			}
		}
	}
	
	/**
	 * Does the graph contain the vertex name given in the parameter {@code source}?
	 * @param source the name of the vertex
	 * @return true if it is in the graph, false if not.
	 */
	public boolean contains(String source) {
		return st.contains(source);
	}
	
	/**
	 * Returns the integer (value part of ST) of the given vertex name in parameter {@code source}.
	 * @param source the name of the vertex
	 * @return the integer (between 0 and V - 1) associated with the vertex given.
	 */
	public int index(String source) {
		return st.get(source);
	}
	
	/**
	 * Returns the name of the given vertex number given in the parameter. 
	 * @param vertex the integer corresponding to a vertex.
	 * @return the name of the vertex.
	 */
	public String name(int vertex) {
		return keys[vertex];
	}
	
	/**
	 * Returns the graph associated with the symbol graph.
	 * @return the graph associated with the symbol graph.
	 */
	public Digraph_d1 graph() {
		return graph;
	}
	
    public static void main(String[] args) throws MalformedURLException {
    	URL url = new URL("https://introcs.cs.princeton.edu/java/data/contiguous-usa.dat");
    	String delimiter = " ";
    	SymbolGraph_d1 sg = new SymbolGraph_d1(url, delimiter);
    	
    	System.out.println(sg.graph.toString(sg));
    	
    	Scanner sc = new Scanner(System.in);
    	
    	System.out.println("Source: ");
    	String sourceString = sc.nextLine();
    	System.out.println("Destination: ");
    	String destinationString = sc.nextLine();
    	
    	int source = sg.index(sourceString);
    	int destination = sg.index(destinationString);
    	
    	BreadthFirstPaths bfs = new BreadthFirstPaths(sg.graph(), source);
    	
    	if(bfs.hasPathTo(destination)) {
    		System.out.println("There is a path between " 
    							+ sourceString + " and " + destinationString + ".");
    	} else {
    		System.out.println("There is not a path between "
    							+ sourceString + " and " + destinationString + ".");
    	}
    }
}
