package directed_2;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Scanner;

import edu.princeton.cs.algs4.*;

/**
 * 
 * Reads a url database to set up a directed graph of vertices depending on the input.
 * Then prints each vertex and the directed edges for all vertices, using Breadth First Search.
 * 
 * Then finds a directed cycle in graph, after adding an edge between NC and AL. 
 * 
	49 vertices, 108 edges
	AL: TN -> MS -> GA -> FL -> 
	FL: GA -> 
	GA: TN -> SC -> NC -> 
	MS: TN -> 
	TN: VA -> 
	AR: TX -> TN -> OK -> MS -> MO -> LA -> 
	LA: TX -> MS -> 
	MO: TN -> OK -> NE -> 
	OK: TX -> 
	TX: 
	AZ: UT -> NV -> NM -> CA -> 
	CA: OR -> NV -> 
	NM: TX -> OK -> 
	NV: UT -> OR -> 
	UT: WY -> 
	OR: WA -> 
	CO: WY -> UT -> OK -> NM -> NE -> KS -> 
	KS: OK -> NE -> MO -> 
	NE: WY -> SD -> 
	WY: 
	CT: RI -> NY -> MA -> 
	MA: VT -> RI -> NY -> NH -> 
	NY: VT -> PA -> 
	RI: 
	DC: VA -> MD -> 
	MD: WV -> VA -> PA -> 
	VA: WV -> 
	DE: PA -> NJ -> MD -> 
	NJ: PA -> NY -> 
	PA: WV -> 
	NC: AL -> VA -> TN -> SC -> 
	SC: 
	IA: WI -> SD -> NE -> MO -> MN -> IL -> 
	IL: WI -> MO -> KY -> IN -> 
	MN: WI -> SD -> ND -> 
	SD: WY -> 
	WI: 
	ID: WY -> WA -> UT -> OR -> NV -> MT -> 
	MT: WY -> SD -> ND -> 
	WA: 
	IN: OH -> MI -> KY -> 
	KY: WV -> VA -> TN -> OH -> MO -> 
	MI: WI -> OH -> 
	OH: WV -> PA -> 
	WV: 
	NH: VT -> 
	VT: 
	ME: NH -> 
	ND: SD -> 
	
	Directed cycle: 
	NC -> AL -> GA -> NC -> 
 * 
 **/
public class SymbolGraph {

	private ST<String, Integer> st;
	private String[] keys;
	private Digraph_d2 graph;
	
	/**
	 * Initializes a graph from url, using a specified delimiter. Each line in the url database
	 * contains name of the vertex, followed by a list of the names of the vertices adjacent
	 * to that vertex.
	 * @param url the url to get the vertices
	 * @param delimiter the delimiter between fields.
	 */
	public SymbolGraph(URL url, String delimiter) {
		
        //First pass builds the index by reading strings to associate
        //distinct strings with an index
		st = new ST<String,Integer>();
		In in = new In(url);
		while(!in.isEmpty()) {
			String[] splitLineArray = in.readLine().split(delimiter);
			for(int i = 0; i < splitLineArray.length; i++) {
				if (!st.contains(splitLineArray[i]))
					st.put(splitLineArray[i], st.size());
			}
		}
		
		//inverted index to get string keys in an array
		keys = new String[st.size()];
		for (String name : st.keys()) {
			keys[st.get(name)] = name;
		}
		
        // second pass builds the graph by connecting first vertex on each
        // line to all others
		graph = new Digraph_d2 (st.size());
		in = new In(url);
		while(in.hasNextLine()) {
			String[] splitLineArray = in.readLine().split(delimiter);
			int v = st.get(splitLineArray[0]);
			for (int i = 1; i < splitLineArray.length; i++) {
				int w = st.get(splitLineArray[i]);
				graph.addEdge(v, w);
			}
		}
	}
	
	/**
	 * Does the graph contain the vertex name given in the parameter {@code source}?
	 * @param source the name of the vertex
	 * @return true if it is in the graph, false if not.
	 */
	public boolean contains(String source) {
		return st.contains(source);
	}
	
	/**
	 * Returns the integer (value part of ST) of the given vertex name in parameter {@code source}.
	 * @param source the name of the vertex
	 * @return the integer (between 0 and V - 1) associated with the vertex given.
	 */
	public int index(String source) {
		return st.get(source);
	}
	
	/**
	 * Returns the name of the given vertex number given in the parameter. 
	 * @param vertex the integer corresponding to a vertex.
	 * @return the name of the vertex.
	 */
	public String name(int vertex) {
		return keys[vertex];
	}
	
	/**
	 * Returns the graph associated with the symbol graph.
	 * @return the graph associated with the symbol graph.
	 */
	public Digraph_d2 graph() {
		return graph;
	}
	
    public static void main(String[] args) throws FileNotFoundException, MalformedURLException {
    	URL url = new URL("https://introcs.cs.princeton.edu/java/data/contiguous-usa.dat");
    	String delimiter = " ";
    	SymbolGraph_d2 sg = new SymbolGraph_d2(url, delimiter);
    	sg.graph.addEdge(sg.index("NC"), sg.index("AL"));
    	
    	System.out.println(sg.graph.toString(sg));
    	
    	DirectedCycle_d2 dc = new DirectedCycle_d2(sg.graph());
    	
    	if(dc.hasCycle()) {
    		System.out.println("Directed cycle: ");
    		for(int i : dc.cycle()) {
    			System.out.print(sg.name(i) + " -> ");
    		}
    		System.out.println();
    	} else {
    		System.out.println("No directed cycles...");
    	}
    }
}
