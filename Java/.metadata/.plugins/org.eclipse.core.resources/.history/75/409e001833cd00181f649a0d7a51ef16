package undirected_1;

import java.net.MalformedURLException;
import java.net.URL;
import edu.princeton.cs.algs4.*;

public class SymbolGraph {

	private ST<String, Integer> st;
	private String[] keys;
	private Graph graph;
	
	/**
	 * Initializes a graph from url, using a specified delimiter. Each line in the url database
	 * contains name of the vertex, followed by a list of the names of the vertices adjacent
	 * to that vertex.
	 * @param url the url to get the vertices
	 * @param delimiter the delimiter between fields.
	 */
	public SymbolGraph(URL url, String delimiter) {
		
        // First pass builds the index by reading strings to associate
        // distinct strings with an index
		st = new ST<String,Integer>();
		In in = new In(url);
		while(!in.isEmpty()) {
			String[] a = in.readLine().split(delimiter);
			for(int i = 0; i < a.length; i++) {
				if (!st.contains(a[i]))
					st.put(a[i], st.size());
			}
		}
		
		//inverted index to get string keys in an array
		keys = new String[st.size()];
		for (String name : st.keys()) {
			keys[st.get(name)] = name;
		}
		
        // second pass builds the graph by connecting first vertex on each
        // line to all others
		graph = new Graph (st.size());
		in = new In(url);
		
		while(in.hasNextLine()) {
			String[] a = in.readLine().split(delimiter);
			int v = st.get(a[0]);
			for (int i = 1; i < a.length; i++) {
				int w = st.get(a[i]);
				graph.addEdge(v, w);
			}
		}
	}
	
	public boolean contains(String s) {
		return st.contains(s);
	}
	
	public int index(String s) {
		return st.get(s);
	}
	
	public String name(int v) {
		return keys[v];
	}
	
	public Graph graph() {
		return graph;
	}
	
    public static void main(String[] args) throws MalformedURLException {
    	URL url = new URL("https://introcs.cs.princeton.edu/java/data/contiguous-usa.dat");
    	String delimiter = " ";
    	SymbolGraph sg = new SymbolGraph(url, delimiter);
    	
    	System.out.println(sg.graph.toString(sg));
    	
    	int source = sg.index("CA");
    	int destination = sg.index("NY");
    	
    	DepthFirstSearch dfs = new DepthFirstSearch(sg.graph(), source);
    	
    	if(dfs.hasPathTo(destination)) {
    		for(Integer i : dfs.pathTo(destination))
    			System.out.println(sg.name(i));
    	}

    }
}
