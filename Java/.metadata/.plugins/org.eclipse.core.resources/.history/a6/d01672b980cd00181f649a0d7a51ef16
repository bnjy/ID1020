package undirected_1;

import java.net.MalformedURLException;
import java.net.URL;
import edu.princeton.cs.algs4.*;

/**
 * 
 * Reads a url database to set up a graph of nodes depending on the input.
 * Then prints each node and the edges for all nodes, using Depth First Search.
 * 
 * Then prints the path between two given nodes, CA and NY.
 * 
 *
	49 vertices, 107 edges
	AL: TN MS GA FL 
	FL: GA AL 
	GA: TN SC NC FL AL 
	MS: TN LA AR AL 
	TN: VA NC MS MO KY GA AR AL 
	AR: TX TN OK MS MO LA 
	LA: TX MS AR 
	MO: TN OK NE KY KS IL IA AR 
	OK: TX NM MO KS CO AR 
	TX: OK NM LA AR 
	AZ: UT NV NM CA 
	CA: OR NV AZ 
	NM: TX OK CO AZ 
	NV: UT OR ID CA AZ 
	UT: WY NV ID CO AZ 
	OR: WA NV ID CA 
	CO: WY UT OK NM NE KS 
	KS: OK NE MO CO 
	NE: WY SD MO KS IA CO 
	WY: UT SD NE MT ID CO 
	CT: RI NY MA 
	MA: VT RI NY NH CT 
	NY: VT PA NJ MA CT 
	RI: MA CT 
	DC: VA MD 
	MD: WV VA PA DE DC 
	VA: WV TN NC MD KY DC 
	DE: PA NJ MD 
	NJ: PA NY DE 
	PA: WV OH NY NJ MD DE 
	NC: VA TN SC GA 
	SC: NC GA 
	IA: WI SD NE MO MN IL 
	IL: WI MO KY IN IA 
	MN: WI SD ND IA 
	SD: WY NE ND MT MN IA 
	WI: MN MI IL IA 
	ID: WY WA UT OR NV MT 
	MT: WY SD ND ID 
	WA: OR ID 
	IN: OH MI KY IL 
	KY: WV VA TN OH MO IN IL 
	MI: WI OH IN 
	OH: WV PA MI KY IN 
	WV: VA PA OH MD KY 
	NH: VT ME MA 
	VT: NY NH MA 
	ME: NH 
	ND: SD MT MN 
	
	CA
	OR
	WA
	ID
	WY
	UT
	NV
	AZ
	NM
	TX
	OK
	MO
	TN
	VA
	WV
	PA
	NY
 *	
 * @author Roth
 *
 */
public class SymbolGraph {

	private ST<String, Integer> st;
	private String[] keys;
	private Graph graph;
	
	/**
	 * Initializes a graph from url, using a specified delimiter. Each line in the url database
	 * contains name of the vertex, followed by a list of the names of the vertices adjacent
	 * to that vertex.
	 * @param url the url to get the vertices
	 * @param delimiter the delimiter between fields.
	 */
	public SymbolGraph(URL url, String delimiter) {
		
        // First pass builds the index by reading strings to associate
        // distinct strings with an index
		st = new ST<String,Integer>();
		In in = new In(url);
		while(!in.isEmpty()) {
			String[] splitLineArray = in.readLine().split(delimiter);
			for(int i = 0; i < splitLineArray.length; i++) {
				if (!st.contains(splitLineArray[i]))
					st.put(splitLineArray[i], st.size());
			}
		}
		
		//inverted index to get string keys in an array
		keys = new String[st.size()];
		for (String name : st.keys()) {
			keys[st.get(name)] = name;
		}
		
        // second pass builds the graph by connecting first vertex on each
        // line to all others
		graph = new Graph (st.size());
		in = new In(url);
		while(in.hasNextLine()) {
			String[] splitLineArray = in.readLine().split(delimiter);
			int v = st.get(splitLineArray[0]);
			for (int i = 1; i < splitLineArray.length; i++) {
				int w = st.get(splitLineArray[i]);
				graph.addEdge(v, w);
			}
		}
	}
	
	/**
	 * Does the graph contain the vertex name given in the parameter {@code source}?
	 * @param source the name of the vertex
	 * @return true if it is in the graph, false if not.
	 */
	public boolean contains(String source) {
		return st.contains(source);
	}
	
	/**
	 * Returns the integer (value part of ST) of the given vertex name in parameter {@code source}.
	 * @param source the name of the vertex
	 * @return the integer (between 0 and V - 1) associated with the vertex given.
	 */
	public int index(String source) {
		return st.get(source);
	}
	
	/**
	 * Returns the name of the given vertex number given in the parameter. 
	 * @param vertex the integer corresponding to a vertex.
	 * @return the name of the vertex.
	 */
	public String name(int vertex) {
		return keys[vertex];
	}
	
	/**
	 * Returns the graph associated with the symbol graph.
	 * @return the graph associated with the symbol graph.
	 */
	public Graph graph() {
		return graph;
	}
	
    public static void main(String[] args) throws MalformedURLException {
    	URL url = new URL("https://introcs.cs.princeton.edu/java/data/contiguous-usa.dat");
    	String delimiter = " ";
    	SymbolGraph_u1 sg = new SymbolGraph_u1(url, delimiter);
    	
    	System.out.println(sg.graph.toString(sg));
    	
    	int source = sg.index("CA");
    	int destination = sg.index("NY");
    	
    	DepthFirstSearch dfs = new DepthFirstSearch(sg.graph(), source);
    	
    	if(dfs.hasPathTo(destination)) {
    		for(Integer i : dfs.pathTo(destination))
    			System.out.println(sg.name(i));
    	}

    }
}
